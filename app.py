# -*- coding: utf-8 -*-
"""Untitled37.ipynb


Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ChFr1p6HeamBznr7nGEB8Kdet5v6h_og
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import datetime
import base64

# Load trained model
model = joblib.load("solar_power_model.pkl")

# Feature list
features = [
    "temperature_2_m_above_gnd",
    "relative_humidity_2_m_above_gnd",
    "total_precipitation_sfc",
    "shortwave_radiation_backwards_sfc",
    "angle_of_incidence",
    "zenith",
    "azimuth",
    "wind_speed_10_m_above_gnd",
    "total_cloud_cover_sfc",
    "hour", "dayofyear", "month", "weekday", "is_weekend"
]

# Custom background
def add_bg_from_local(image_file):
    with open(image_file, "rb") as file:
        encoded = base64.b64encode(file.read()).decode()
    css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{encoded}");
        background-size: cover;
        background-attachment: fixed;
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

# Optional: Uncomment to use a background
# add_bg_from_local("solar_bg.jpg")

# Page Config
st.set_page_config(page_title="‚òÄÔ∏è Solar Power Output Predictor", layout="centered")

# Title
st.markdown("<h1 style='text-align: center; color: orange;'>‚òÄÔ∏è Solar Power Output Predictor</h1>", unsafe_allow_html=True)
st.markdown("---")



# Input form
with st.form("prediction_form"):
    col1, col2 = st.columns(2)

    with col1:
        temperature = st.number_input("üå°Ô∏è Temperature (¬∞C)", value=30.0)
        humidity = st.number_input("üíß Humidity (%)", value=50.0)
        precipitation = st.number_input("üåßÔ∏è Precipitation (mm)", value=0.0)
        radiation = st.number_input("üåû Shortwave Radiation", value=100.0)
        angle = st.number_input("üü° Angle of Incidence (¬∞)", value=45.0)
        zenith = st.number_input("üî≠ Zenith (¬∞)", value=40.0)
        azimuth = st.number_input("üß≠ Azimuth (¬∞)", value=180.0)

    with col2:
        wind_speed = st.number_input("üí® Wind Speed (m/s)", value=3.0)
        cloud_cover = st.number_input("‚òÅÔ∏è Cloud Cover (%)", value=30.0)

        selected_date = st.date_input("üìÖ Select Date", value=datetime.date.today())
        selected_time = st.time_input("‚è∞ Select Time", value=datetime.datetime.now().time())
        selected_datetime = datetime.datetime.combine(selected_date, selected_time)
        hour = selected_datetime.hour
        dayofyear = selected_datetime.timetuple().tm_yday
        month = selected_datetime.month
        weekday = selected_datetime.weekday()
        is_weekend = 1 if weekday >= 5 else 0

    submitted = st.form_submit_button("üîÆ Predict Power Output")

if submitted:
    # Prepare input
    input_data = np.array([[temperature, humidity, precipitation, radiation,
                            angle, zenith, azimuth, wind_speed, cloud_cover,
                            hour, dayofyear, month, weekday, is_weekend]])
    input_df = pd.DataFrame(input_data, columns=features)

    # Predict
    prediction = model.predict(input_df)[0]

    st.markdown("---")
    st.success(f"üåû Predicted Solar Power Output: **{prediction:.2f} kW**")
    st.markdown("---")

    # Save log (optional)
    log_df = input_df.copy()
    log_df["Predicted_kW"] = prediction
    log_df.to_csv("solar_predictions_log.csv", mode="a", header=False, index=False)
    st.info("Logged to `solar_predictions_log.csv`")