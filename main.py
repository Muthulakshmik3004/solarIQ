# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LBKJJywSQZm95k7t26zUa3YB90PwiUCn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import r2_score, mean_squared_error
from xgboost import XGBRegressor
from scipy import stats
import joblib

df = pd.read_csv("spg.csv")

df['timestamp'] = pd.date_range(start='2024-01-01 00:00:00', periods=len(df), freq='H')
df['hour'] = df['timestamp'].dt.hour
df['dayofyear'] = df['timestamp'].dt.dayofyear
df['month'] = df['timestamp'].dt.month
df['weekday'] = df['timestamp'].dt.weekday
df['is_weekend'] = df['weekday'].apply(lambda x: 1 if x >= 5 else 0)

df.dropna(inplace=True)
print("✅ Dataset shape:", df.shape)

z_scores = np.abs(stats.zscore(df.select_dtypes(include=[np.number])))
df = df[(z_scores < 3).all(axis=1)]
print("✅ Shape after outlier removal:", df.shape)

features = [
    "temperature_2_m_above_gnd",
    "relative_humidity_2_m_above_gnd",
    "total_precipitation_sfc",
    "shortwave_radiation_backwards_sfc",
    "angle_of_incidence",
    "zenith",
    "azimuth",
    "wind_speed_10_m_above_gnd",
    "total_cloud_cover_sfc",
    "hour", "dayofyear", "month", "weekday", "is_weekend"
]
target = "generated_power_kw"

X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42)

param_grid = {
    'n_estimators': [200, 300],
    'max_depth': [4, 6],
    'learning_rate': [0.03, 0.05],
    'subsample': [0.8, 1.0],
    'colsample_bytree': [0.7, 0.9]
}

grid = GridSearchCV(XGBRegressor(random_state=42), param_grid, cv=3, scoring='r2', n_jobs=-1)
grid.fit(X_train, y_train)

best_model = grid.best_estimator_

y_pred = best_model.predict(X_test)
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"✅ Final R² Score: {r2:.4f}")
print(f"🔍 RMSE: {rmse:.3f} kW")

plt.figure(figsize=(10, 5))
sns.barplot(x=best_model.feature_importances_, y=features)
plt.title("XGBoost Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Features")
plt.tight_layout()
plt.show()

joblib.dump(best_model, "solar_power_model.pkl")
print("✅ Model saved as solar_power_model.pkl")